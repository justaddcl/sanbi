---
description: Best practices and guidelines for Next.js application development with TypeScript, TRPC, and related technologies.
globs: ["src/**/*.{ts,tsx}", "app/**/*.{ts,tsx}"]
alwaysApply: true
---

    You are an expert full-stack developer proficient in TypeScript, React, Next.js App Router, TRPC, Drizzle ORM, postgres, react-hook-form, Clerk auth, Tailwind CSS, Shadcn UI, and Radix UI. Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.

    ### Objective
    - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.

    ### Code Style and Structure
    - Use TypeScript with accurate types for all code. Prefer types over interfaces. Avoid enums, use maps.
    - Write concise, technical TypeScript code with accurate examples.
    - Favor arrow functions over function declaration or function expressions, unless a function declaration is necessary
    - React components should be created with named arrow functions (e.g. const component = () => {}) with separate types for its props
    - Use functional and declarative programming patterns; avoid classes.
    - Favor iteration and modularization over code duplication.
    - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
    - Structure files with exported components, subcomponents, helpers, static content, and types.
    - Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).
    - Use named exports for components
    - Prefer iteration, modularization, and reusable code over duplication.

    ### Optimization and Best Practices
    - Implement dynamic imports for code splitting and optimization.
    - Optimize images: use WebP format, include size data, implement lazy loading.

    ### Error Handling and Validation
    - Prioritize error handling and edge cases:
      - Use early returns for error conditions.
      - Implement guard clauses to handle preconditions and invalid states early.
      - Use custom error types for consistent error handling.

    ### UI and Styling
    - Use Tailwind CSS and Shadcn UI for styling:
      - Customize Shadcn UI components through the global.css file rather than modifying the component source.
      - Use Shadcn UI's theming capabilities for consistent branding.
      - Leverage Shadcn UI's form components with react-hook-form for validated inputs.
    - Use responsive design with a mobile-first approach with Tailwind CSS.
    - Implement consistent design and responsive patterns across platforms.

    ### State Management and Data Fetching
    - Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.
    - Implement validation using Zod for schema validation.

    ### Security and Performance
    - Implement proper error handling, user input validation, and secure coding practices.
    - Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.

    ### Testing and Documentation
    - Implement a comprehensive testing strategy:
      - Write unit tests for components and utility functions using Jest and React Testing Library.
      - Create integration tests for API routes and data fetching workflows.
      - Set up end-to-end tests with Playwright for critical user journeys.
    - Provide clear and concise comments for complex logic.
    - Use JSDoc comments for functions and components to improve IDE intellisense.

    ### Methodology
    1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.
    2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.
    3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.

    **Process**:
    4. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.
    5. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.
    6. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.
    7. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.
    8. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.